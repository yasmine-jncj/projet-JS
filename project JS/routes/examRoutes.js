const express = require('express');
const router = express.Router();
const Exam = require('../models/exam');
const { protect, restrictTo } = require('../middleware/auth');
const { check, validationResult } = require('express-validator');

// @desc    Create a new exam
// @route   POST /api/v1/exams
// @access  Private/Teacher
router.post(
    '/',
    protect,
    restrictTo('teacher'),
    [
        check('title', 'Title is required').notEmpty().trim(),
        check('description', 'Description cannot exceed 500 characters').optional().trim().isLength({ max: 500 }),
        check('duration', 'Duration must be between 1 and 300 minutes').isInt({ min: 1, max: 300 }),
        check('targetGroup', 'Target group is required').notEmpty()
    ],
    async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
        }

        try {
        const exam = await Exam.create({
            title: req.body.title,
            description: req.body.description,
            duration: req.body.duration,
            targetGroup: req.body.targetGroup,
            createdBy: req.user.id,
            // accessLink is auto-generated by pre-save hook
        });

        res.status(201).json({
            status: 'success',
            data: {
            exam,
            accessLink: exam.accessLink.fullUrl
            }
        });
        } catch (err) {
        res.status(400).json({
            status: 'fail',
            message: 'Exam creation failed',
            error: process.env.NODE_ENV === 'development' ? err.message : undefined
        });
        }
    }
);

// @desc    Generate exam link
// @route   PATCH /api/v1/exams/:id/generate-link
// @access  Private/Teacher
router.patch(
    '/:id/generate-link',
    protect,
    restrictTo('teacher'),
    async (req, res) => {
        try {
        const exam = await Exam.findOneAndUpdate(
            {
            _id: req.params.id,
            createdBy: req.user.id,
            status: 'draft' // Only allow link generation for draft exams
            },
            { $set: { status: 'active' } }, // Change status when generating link
            { new: true, runValidators: true }
        );

        if (!exam) {
            return res.status(404).json({
            status: 'fail',
            message: 'Exam not found, already active, or you are not the owner'
            });
        }

        res.json({
            status: 'success',
            data: {
            accessLink: exam.accessLink.fullUrl
            }
        });
        } catch (err) {
        res.status(500).json({
            status: 'error',
            message: 'Failed to generate exam link',
            error: process.env.NODE_ENV === 'development' ? err.message : undefined
        });
        }
    }
    );

// @desc    Get all exams for teacher
// @route   GET /api/v1/exams/teacher
// @access  Private/Teacher
router.get(
'/teacher',
protect,
restrictTo('teacher'),
async (req, res) => {
    try {
        const exams = await Exam.find({ createdBy: req.user.id })
            .sort({ createdAt: -1 })
            .select('-__v');

        res.json({
            status: 'success',
            results: exams.length,
            data: { exams }
        });
        } catch (err) {
        res.status(500).json({
            status: 'error',
            message: 'Failed to fetch exams',
            error: process.env.NODE_ENV === 'development' ? err.message : undefined
        });
        }
    }
);

module.exports = router;
